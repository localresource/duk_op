<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>
<% environment.context_class.instance_eval { include EventsHelper } %>

$(document).ready(function() {
    activateFormPlugins();
    initLocationTypeahead();
    activateFormListeners();
});

function initLocationTypeahead() {
    initTypeahead('#location-typeahead');
}


//create the given typeahead based on a selector
// the selected element must have the correct data elements
function initTypeahead(selector){
    var $typeahead = $(selector);
    // guard clause to prevent errors when the object isn't present
    if (!$typeahead.length) return;
    var data = $typeahead.data();
    // constructs the suggestion engine
    var engine = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('display_name'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        prefetch: {
            url: data.apiPath
        },
        limit: 4
    });

    //ensure the data we've got is always the most recent
    engine.clearPrefetchCache();
    // kicks off the loading/processing of `local` and `prefetch`
    engine.initialize();

    $typeahead.typeahead({
        hint: false,
        highlight: true,
        minLength: 0
    },
    {
        displayKey: data.displayKey,
        // `ttAdapter` wraps the suggestion engine in an adapter that
        // is compatible with the typeahead jQuery plugin
        source: engine.ttAdapter(),
        templates: {
            //header and footer log is stored in the events helper to enable reuse
            header: '<%= typeahead_header %>'.replace('_value_', data.header),
            empty: '<%= typeahead_element %>'.replace('_value_', data.emptyMessage)
        }
    });
    $typeahead.on('typeahead:opened', function(){
        $typeahead.attr('placeholder', '');
    });
    $typeahead.on('typeahead:selected', function(event, chosen){
            $(data.target).val(chosen.id)
    });
}

/**
 * Generic function to allow us to hide and show DOM elements
 * through the use of an input with data-function='show', data-target and
 * data-hide attributes where the last two contain selectors.
 */
function showListener(){
    function handleChange(){
        var show_target = $(this).attr('data-target');
        var hide_target = $(this).attr('data-hide');
        if ($(this).is(':checkbox')) {
            $(show_target).toggle(this.checked);
            $(hide_target).toggle(!this.checked);
        } else {
            $(show_target).toggle();
            $(hide_target).toggle(); 
        }
    }
    // button clicks don't count as change events so we need to handle both
    // change and click
    $('[data-function="show"]').change(handleChange);
    $('[data-function="show"]').click(handleChange);
}


function activateFormListeners() {
    modalFormListener();
    initDateTimePicker();

    categoryTagListener();
    showListener();
    // we trigger the change event for the checkboxes so that the correct inputs 
    // will be shown on page refresh (i.e. it's not click dependent)
    $('.checkbox [data-function="show"]').change();
    $('.glyphicon-trash').click(removePicture);


    $('.btn-file :file').on('fileselect', function(event, numFiles, label) {
        $('#js_button_text').text(label);
        $('#event_remove_picture').val('0');
        validateFileInput(this);
        addRemoveButton(this);
    });

    // UI for repeating events - what does this do?
    $('#event_series_frequency').on('change', function(){
        var selected = $(this).children('option:selected');
        var unit = $(selected).data('unit');
        $('#unit').text(unit);
    });

    // Prevent submission of form on enter 
    $('.event_form form').on('keypress', ':input:not(textarea)', function(event){
        if (event.keyCode == 13){
            event.preventDefault();
            return false;
        }
    })
}

function initDateTimePicker(){
    // Initialise all inputs with the given data attribute and value
    $('[data-function="datetime-picker"]').each(function(){
        var data = $.extend($(this).data(), {locale: locale, stepping: 15});
        delete data.function;
        delete data.listener;
        delete data.role;
        $(this).datetimepicker(data);
    });

    // For each start time, setup a listener action on the
    // corresponding end time
    $('[data-role="start-time"]').each(function(){
        $start = $(this);
        $end = $($start.data('listener'));
        if ($end.length == 0) return;
        $start.data('DateTimePicker').minDate(new Date());
        $end.data('DateTimePicker').minDate(new Date());
        // set the end time to be the start date
        $start.on('dp.change', function(e){
            $end.data("DateTimePicker").minDate(e.date);
            $end.data("DateTimePicker").date(e.date);
        });
    });
    // kill the clock link - this could be problematic if we need it somewhere else!
    $('li.picker-switch a').remove();
}

// add the remove button with listener after adding the file
function addRemoveButton(input) {
    // don't add the button if it's already there
    if ($('.glyphicon-trash').length > 0) return;
    $(input).parents('span').after('<%= bootstrap_glyphicon("trash") %>');
    $button = $('.glyphicon-trash');
    $button.addClass('btn btn-default');
    $button.click(removePicture);
}

function removePicture(){
    $('#js_button_text').text(i18n.events.form.choose_file);
    $('#event_remove_picture').val('1');
    $('span[data-role="picture_warning"]')
            .html(i18n.events.form.picture.warning)
            .removeClass('alert alert-success alert-danger')
            .addClass('text text-warning');
    $button.remove();
}

/**
 * Ensure file selected is valid
 * (under 5MB and a jpeg or png)
 * If not prevent form completion
 * and give the user an error message.
 * @param input (file input)
 */
function validateFileInput(input){
    // guards - ensure browser has FileReader API
    // and has files method on File object
    // and there is a file
    if (!window.FileReader) return;
    if (!input.files) return;
    if (!input.files[0]) return;

    var file = input.files[0];
    var allowedTypes = ["image/png", "image/jpeg"];
    var error = false;
    var message = '';
    var size_mb = file.size/1024/1024;
    if (size_mb > 5 ) {
        error = true;
        message += i18n.events.form.picture.too_big + " ";
    }
    if (allowedTypes.indexOf(file.type) == -1) {
        error = true;
        message += i18n.events.form.picture.wrong_format;
    }
    $text_field = $('span[data-role="picture_warning"]');
    if (error) {
        $text_field
                .html(message)
                .removeClass()
                .addClass('alert alert-danger');
    } else {
        $text_field
                .html(i18n.events.form.picture.ok)
                .removeClass()
                .addClass('alert alert-success')
    }
}

$(document)
        .on('change', '.btn-file :file', function() {
            var input = $(this),
                    numFiles = input.get(0).files ? input.get(0).files.length : 1,
                    label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
            input.trigger('fileselect', [numFiles, label]);
        });

function modalFormListener() {
    $('a[data-target="remote_form_modal"]').on("ajax:success", function (event, xhr) {
        loadRemoteModal(this, event, xhr);
    });
}

function activateFormPlugins() {
    $('[data-toggle="popover"]').popover();
}

/**
 * Attached to click on category tags X icon
 * remove whole tag and input target when clicked.
 */
function categoryTagListener(){
    $('[data-function="remove_category"]').click(function(){
        var id = $(this).attr('data-target');
        $('#' + id).remove();
        $(this).parent('.tag').remove();
        return false;
    })
}

/**
 * Populate a Bootstrap modal with our
 * ajax response and activate it.
 * @param event
 * @param xhr
 */
function loadRemoteModal(context, event, xhr) {
    // listeners to be attached dynamically to
    // the loaded modal object
    // in the event of success we receive a json object
    // which we use to update the form after writing
    // a success message
    // in case of failure, we receive back html which
    // we put back into the modal
    function handleSuccess(event, xhr) {
        $target.find('.modal-body').html(xhr.message);
        // refresh the typeahead to include the result
        initLocationTypeahead();

        var update_field = '[name="' + $this.attr('data-update-field') + '"]';
        $(update_field).val(xhr.id);
        // put the name into the input field and disable it
        var update_val = $this.attr('data-update-val');
        $(update_val).val(xhr.display_name);
    }
    function handleFailure(event, xhr) {
        $target.find('.modal-body').html(xhr.responseText);
    }
    var $this = $(context);
    var title = $this.attr('data-modal-title');
    var $target = $('#remote_form_modal');
    $target.find('.modal-body').html(xhr);
    $target.find('.modal-title').text(title);
    // parse the xhr response and get the form object
    // in order to attach listeners
    var $form = $target.find('form');
    $form.on('ajax:success', handleSuccess);
    $form.on('ajax:error', handleFailure);
    $target.modal();
}

